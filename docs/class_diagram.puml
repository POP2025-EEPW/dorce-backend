@startuml
skinparam classAttributeIconSize 0
class SecurityConfig{
- userService : UserService
+ SecurityConfig(userService : UserService)
+ authFilter() : AuthFilter
+ filterChain(http : HttpSecurity) : SecurityFilterChain
}
class AuthService{
userRepository : UserRepository
+ AuthService(userRepository : UserRepository)
+ authUser(request : AuthRequest) : String
}
class DatasetController{
- datasetService : DatasetService
+ addDataset(dataset : DatasetCreationRequest) : ResponseEntity<?>
+ getDataset(id : UUID) : ResponseEntity<?>
}
class AddCatalogRequest{
- parentCatalogId : UUID
- catalog : CatalogDto
}
class DatasetCreationRequest{
- title : String
- description : String
}
class ResourceNotFoundException{
+ ResourceNotFoundException(message : String)
}
ResourceNotFoundException --|> RuntimeException
class AuthFilter{
- userService : UserService
+ AuthFilter(userService : UserService)
# doFilterInternal(request : HttpServletRequest, response : HttpServletResponse, filterChain : FilterChain) : void
}
AuthFilter --|> OncePerRequestFilter
class DatasetService{
- datasetRepository : DatasetRepository
+ DatasetService(datasetRepository : DatasetRepository)
+ getDataset(id : UUID) : Dataset
+ addDataset(dataset : DatasetCreationRequest) : Dataset
}
class CatalogController{
catalogService : CatalogService
datasetService : DatasetService
+ addCatalog(request : AddCatalogRequest) : ResponseEntity<?>
+ listCatalogs(parentCatalogId : UUID) : ResponseEntity<?>
+ getCatalog(catalogId : UUID) : ResponseEntity<?>
+ getCatalogDatasets(catalogId : UUID, page : Integer, pageSize : Integer) : ResponseEntity<?>
}
class Dataset{
- id : UUID
- title : String
- description : String
+ Dataset()
+ Dataset(title : String, description : String)
}
class UserService{
- userRepository : UserRepository
+ UserService(userRepository : UserRepository)
- generateAuthToken() : String
+ registerNewUser(request : UserRegistrationRequest) : User
+ getUserByAuthToken(authToken : String) : User
}
class DorceApplication{
- testRepository : TestRepository
home() : String
+ {static} main(args : String[]) : void
}
class CatalogService{
- catalogRepository : CatalogRepository
+ addCatalog(parentCatalogId : UUID, catalog : Catalog) : Catalog
+ getCatalog(catalogId : UUID) : Catalog
+ listCatalogs(parentCatalogId : UUID) : List<Catalog>
+ listCatalogDatasets(catalogId : UUID, page : Integer, pageSize : Integer) : List<Dataset>
}
class UserRegistrationRequest{
- username : String
- password : String
- roles : List<Role>
}
class AuthController{
authService : AuthService
+ authUser(request : AuthRequest) : ResponseEntity<?>
}
class AuthRequest{
- username : String
- password : String
}
class UserController{
userService : UserService
+ registerUser(request : UserRegistrationRequest) : ResponseEntity<?>
}
class OpenApiConfig{
}
class User{
- id : UUID
- username : String
- password : String
- authToken : String
- roles : List<Role>
+ User()
+ User(username : String, password : String, roles : List<Role>, authToken : String)
}
class Test{
- id : UUID
+ name : String
+ Test(name : String)
+ Test()
}
class Catalog{
- id : UUID
- description : String
- title : String
- issued : LocalDateTime
- modified : LocalDateTime
- parent : Catalog
- catalogs : List<Catalog>
- datasets : List<Dataset>
}
class CatalogDto{
- description : String
- title : String
- datasets : List<UUID>
}
SecurityConfig--"- userService" UserService
AuthService--"userRepository" UserRepository
DatasetController--"- datasetService" DatasetService
AddCatalogRequest--"- catalog" CatalogDto
AuthFilter--"- userService" UserService
DatasetService--"- datasetRepository" DatasetRepository
CatalogController--"catalogService" CatalogService
CatalogController--"datasetService" DatasetService
UserService--"- userRepository" UserRepository
DorceApplication--"- testRepository" TestRepository
CatalogService--"- catalogRepository" CatalogRepository
AuthController--"authService" AuthService
UserController--"userService" UserService
Catalog--"- parent" Catalog
interface CatalogRepository{
findAllByParentIsNull() : List<Catalog>
findAllByParent(parent : Catalog) : List<Catalog>
}
CatalogRepository --|> JpaRepository
interface UserRepository{
findByUsername(username : String) : User
findByAuthToken(authToken : String) : User
}
UserRepository --|> JpaRepository
interface DatasetRepository{
}
DatasetRepository --|> JpaRepository
interface TestRepository{
}
TestRepository --|> JpaRepository
enum Role{
MetadataManager
AcquisitionAppManager
DataQualityManager
DataSupplier
DataUser
AccessAppDeveloper
Admin
}
@enduml